import { Agent } from "@mastra/core/agent";
import { anthropic } from "@ai-sdk/anthropic";
import { githubIssuesTool } from "../tools/github-issues.tool";
import { githubCommentTool } from "../tools/github-comment.tool";
import { githubCreateIssueTool } from "../tools/github-create-issue.tool";

export const brdAgent = new Agent({
  name: "BRD Generator",
  instructions: `You are a senior business analyst specializing in creating comprehensive Business Requirements Documents (BRDs). 
  
  Your task is to analyze GitHub issues and create a professional BRD that includes:
  
  1. **Executive Summary**: High-level overview of the requirements
  2. **Business Context**: Background and rationale
  3. **Scope**: What is and isn't included
  4. **Functional Requirements**: Detailed feature specifications
  5. **Non-Functional Requirements**: Performance, security, usability
  6. **User Stories**: Acceptance criteria in user story format
  7. **Technical Considerations**: Integration points and constraints
  8. **Risk Assessment**: Potential risks and mitigation strategies
  9. **Timeline and Milestones**: Implementation phases
  10. **Success Metrics**: How success will be measured
  
  Format the BRD professionally with clear sections, bullet points, and structured content.
  Be thorough but concise. Focus on business value and user needs.
  
  When analyzing GitHub issues, look for:
  - Common themes and patterns
  - User pain points and feature requests
  - Technical debt and infrastructure needs
  - Performance and scalability requirements
  - Security and compliance considerations
  
  Present technical issues in business terms that stakeholders can understand.
  Always include rationale for each requirement and link it back to business value.`,
  model: anthropic('claude-4-sonnet-20250514'),
  tools: { githubIssuesTool, githubCommentTool, githubCreateIssueTool }
});

// Helper function to generate BRD with structured context
export async function generateBRD(
  issuesData: any,
  projectContext: {
    projectName: string;
    stakeholders: string[];
    businessObjectives: string[];
    constraints?: string[];
  }
) {
  const { issues, repository } = issuesData;
  
  // Prepare detailed context for the BRD agent
  const issueDetails = issues.map((issue: any) => ({
    title: issue.title,
    description: issue.body || "No description provided",
    labels: issue.labels.map((l: any) => l.name),
    state: issue.state,
    url: issue.html_url
  }));
  
  const prompt = `
    Create a comprehensive Business Requirements Document for the following project:
    
    **Project Information:**
    - Project Name: ${projectContext.projectName}
    - Stakeholders: ${projectContext.stakeholders.join(', ')}
    - Business Objectives: ${projectContext.businessObjectives.join(', ')}
    ${projectContext.constraints ? `- Constraints: ${projectContext.constraints.join(', ')}` : ''}
    
    **Repository Context:**
    - Repository: ${repository.full_name}
    - Description: ${repository.description || 'Not provided'}
    - Total Issues Analyzed: ${issues.length}
    
    **GitHub Issues to Analyze:**
    ${JSON.stringify(issueDetails, null, 2)}
    
    Please create a professional BRD that addresses these issues and aligns with the project objectives.
    Focus on extracting business requirements from the technical issues and presenting them in a business-friendly format.
    
    Structure the document with clear headings, professional formatting, and actionable requirements.
    Each requirement should include:
    - Clear description
    - Business justification
    - Acceptance criteria
    - Priority level (High/Medium/Low)
    - Dependencies (if any)
  `;
  
  const response = await brdAgent.generate([
    { role: "user", content: prompt }
  ]);
  
  return response.text;
}

// Helper function to post BRD back to GitHub issues
export async function postBRDToGitHub(
  brd: string,
  owner: string,
  repo: string,
  issueNumbers: number[],
  projectName: string
) {
  const results = [];
  
  // Create a formatted comment with the BRD
  const commentBody = `## ðŸ“‹ Business Requirements Document Generated

**Project:** ${projectName}
**Generated:** ${new Date().toISOString()}

---

${brd}

---

*This BRD was automatically generated by analyzing GitHub issues and project context. Please review and provide feedback.*`;

  // Post the BRD to each specified issue
  for (const issueNumber of issueNumbers) {
    try {
      const result = await githubCommentTool.execute({
        context: {
          owner,
          repo,
          issueNumber,
          body: commentBody
        },
        runtimeContext: new Map() as any
      });
      
      results.push({
        issueNumber,
        success: result.success,
        message: result.message,
        commentUrl: result.comment?.html_url
      });
      
      console.log(`Posted BRD to issue #${issueNumber}: ${result.message}`);
    } catch (error) {
      results.push({
        issueNumber,
        success: false,
        message: `Failed to post to issue #${issueNumber}: ${error instanceof Error ? error.message : String(error)}`
      });
      
      console.error(`Error posting to issue #${issueNumber}:`, error);
    }
  }
  
  return results;
}

// Helper function to post tasks as GitHub issues
export async function postTasksToGitHub(
  tasks: any[],
  owner: string,
  repo: string,
  projectContext: {
    projectName: string;
    technologyStack: string[];
  },
  projectId?: number
) {
  const results = [];
  
  for (const task of tasks) {
    try {
      // Format task as issue
      const title = `[${task.category.toUpperCase()}] ${task.title}`;
      
      const body = `## ðŸ¤– AI-Generated Task

**Category:** ${task.category}
**Priority:** ${task.priority}
**Complexity:** ${task.complexity || 'moderate'}
**AI Capability Required:** ${task.aiCapability || 'code-generation'}

### Description
${task.description}

### Acceptance Criteria
${task.acceptanceCriteria ? task.acceptanceCriteria.map((criteria: string) => `- [ ] ${criteria}`).join('\n') : 'No specific criteria defined'}

### Technical Specifications
${task.technicalSpecs || 'Follow established patterns and standards'}

### Validation Method
${task.validationMethod || 'Automated testing and validation'}

### Dependencies
${task.dependencies && task.dependencies.length > 0 ? 
  task.dependencies.map((dep: string) => `- ${dep}`).join('\n') : 
  'No dependencies'}

### Project Context
- **Technology Stack:** ${projectContext.technologyStack.join(', ')}
- **Project:** ${projectContext.projectName}

---

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>`;

      // Determine labels based on task properties
      const labels = [
        'ai-generated',
        `priority-${task.priority}`,
        `category-${task.category}`,
        `complexity-${task.complexity || 'moderate'}`
      ];
      
      if (task.parallelizable) {
        labels.push('parallelizable');
      }
      
      const result = await githubCreateIssueTool.execute({
        context: {
          owner,
          repo,
          title,
          body,
          labels,
          projectId
        },
        runtimeContext: new Map() as any
      });
      
      results.push({
        taskId: task.id,
        taskTitle: task.title,
        success: result.success,
        message: result.message,
        issueUrl: result.issue?.html_url,
        issueNumber: result.issue?.number
      });
      
      console.log(`Posted task "${task.title}" to GitHub: ${result.message}`);
    } catch (error) {
      results.push({
        taskId: task.id,
        taskTitle: task.title,
        success: false,
        message: `Failed to post task: ${error instanceof Error ? error.message : String(error)}`
      });
      
      console.error(`Error posting task "${task.title}":`, error);
    }
  }
  
  return results;
}
