import { createTool } from "@mastra/core";
import { z } from "zod";

export const githubIssuesTool = createTool({
  id: "fetch-github-issues",
  description: "Fetch human-created GitHub issues from a repository with optional filtering (excludes AI-generated issues)",
  inputSchema: z.object({
    owner: z.string().describe("GitHub repository owner"),
    repo: z.string().describe("GitHub repository name"),
    state: z.enum(["open", "closed", "all"]).default("open").describe("Issue state filter"),
    labels: z.array(z.string()).optional().describe("Filter by labels"),
    assignee: z.string().optional().describe("Filter by assignee"),
    limit: z.number().min(1).max(100).default(10).describe("Number of issues to fetch"),
    includeAIGenerated: z.boolean().default(false).describe("Whether to include AI-generated issues (issues with 'ai-generated' label)")
  }),
  outputSchema: z.object({
    issues: z.array(z.object({
      id: z.number(),
      number: z.number(),
      title: z.string(),
      body: z.string().nullable(),
      state: z.string(),
      labels: z.array(z.object({
        name: z.string(),
        color: z.string()
      })),
      assignee: z.object({
        login: z.string(),
        avatar_url: z.string()
      }).nullable(),
      created_at: z.string(),
      updated_at: z.string(),
      html_url: z.string()
    })),
    total_count: z.number(),
    repository: z.object({
      name: z.string(),
      full_name: z.string(),
      description: z.string().nullable()
    })
  }),
  execute: async ({ context, runtimeContext }) => {
    const { owner, repo, state, labels, assignee, limit, includeAIGenerated } = context;
    
    // Construct GitHub API URL
    const baseUrl = `https://api.github.com/repos/${owner}/${repo}/issues`;
    const params = new URLSearchParams({
      state,
      per_page: limit.toString(),
      sort: "updated",
      direction: "desc"
    });
    
    if (labels && labels.length > 0) {
      params.append("labels", labels.join(","));
    }
    
    if (assignee) {
      params.append("assignee", assignee);
    }
    
    const url = `${baseUrl}?${params}`;
    
    try {
      // Get GitHub token from environment
      const token = process.env.GITHUB_TOKEN;
      
      const headers: HeadersInit = {
        "Accept": "application/vnd.github.v3+json",
        "User-Agent": "Mastra-GitHub-Issues-Tool"
      };
      
      if (token) {
        headers["Authorization"] = `token ${token}`;
      }
      
      const response = await fetch(url, { headers });
      
      if (!response.ok) {
        throw new Error(`GitHub API error: ${response.status} ${response.statusText}`);
      }
      
      const issues = await response.json();
      
      // Get repository information
      const repoResponse = await fetch(`https://api.github.com/repos/${owner}/${repo}`, { headers });
      const repoData = await repoResponse.json();
      
      // Filter out pull requests (GitHub API returns PRs as issues)
      let filteredIssues = issues.filter((issue: any) => !issue.pull_request);
      
      // Filter out AI-generated issues unless explicitly requested
      if (!includeAIGenerated) {
        filteredIssues = filteredIssues.filter((issue: any) => {
          const hasAILabel = issue.labels.some((label: any) => 
            label.name.toLowerCase().includes('ai-generated') || 
            label.name.toLowerCase().includes('auto-generated') ||
            label.name.toLowerCase().includes('bot-created')
          );
          
          // Also check if the issue was created by a bot user
          const isBot = issue.user?.type === 'Bot' || 
                       issue.user?.login?.toLowerCase().includes('bot') ||
                       issue.user?.login?.toLowerCase().includes('[bot]');
          
          // Check if issue body contains AI generation signatures
          const bodyIndicatesAI = issue.body && (
            issue.body.includes('ðŸ¤– Generated with') ||
            issue.body.includes('Auto-generated') ||
            issue.body.includes('AI-generated') ||
            issue.body.includes('Generated by AI')
          );
          
          return !hasAILabel && !isBot && !bodyIndicatesAI;
        });
      }
      
      return {
        issues: filteredIssues.map((issue: any) => ({
          id: issue.id,
          number: issue.number,
          title: issue.title,
          body: issue.body,
          state: issue.state,
          labels: issue.labels || [],
          assignee: issue.assignee,
          created_at: issue.created_at,
          updated_at: issue.updated_at,
          html_url: issue.html_url
        })),
        total_count: filteredIssues.length,
        repository: {
          name: repoData.name,
          full_name: repoData.full_name,
          description: repoData.description
        }
      };
    } catch (error) {
      throw new Error(`Failed to fetch GitHub issues: ${error instanceof Error ? error.message : String(error)}`);
    }
  }
});
